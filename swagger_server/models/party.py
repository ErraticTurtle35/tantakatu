# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Party(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, first_name: str=None, last_name: str=None, phone: str=None, email: str=None, address: str=None, user_id: int=None, active: bool=True):  # noqa: E501
        """Party - a model defined in Swagger

        :param id: The id of this Party.  # noqa: E501
        :type id: int
        :param first_name: The first_name of this Party.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this Party.  # noqa: E501
        :type last_name: str
        :param phone: The phone of this Party.  # noqa: E501
        :type phone: str
        :param email: The email of this Party.  # noqa: E501
        :type email: str
        :param address: The address of this Party.  # noqa: E501
        :type address: str
        :param user_id: The user_id of this Party.  # noqa: E501
        :type user_id: int
        :param active: The active of this Party.  # noqa: E501
        :type active: bool
        """
        self.swagger_types = {
            'id': int,
            'first_name': str,
            'last_name': str,
            'phone': str,
            'email': str,
            'address': str,
            'user_id': int,
            'active': bool
        }

        self.attribute_map = {
            'id': 'id',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'phone': 'phone',
            'email': 'email',
            'address': 'address',
            'user_id': 'user_id',
            'active': 'active'
        }
        self._id = id
        self._first_name = first_name
        self._last_name = last_name
        self._phone = phone
        self._email = email
        self._address = address
        self._user_id = user_id
        self._active = active

    @classmethod
    def from_dict(cls, dikt) -> 'Party':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Party of this Party.  # noqa: E501
        :rtype: Party
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Party.


        :return: The id of this Party.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Party.


        :param id: The id of this Party.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def first_name(self) -> str:
        """Gets the first_name of this Party.


        :return: The first_name of this Party.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this Party.


        :param first_name: The first_name of this Party.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """Gets the last_name of this Party.


        :return: The last_name of this Party.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this Party.


        :param last_name: The last_name of this Party.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def phone(self) -> str:
        """Gets the phone of this Party.


        :return: The phone of this Party.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this Party.


        :param phone: The phone of this Party.
        :type phone: str
        """

        self._phone = phone

    @property
    def email(self) -> str:
        """Gets the email of this Party.


        :return: The email of this Party.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Party.


        :param email: The email of this Party.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def address(self) -> str:
        """Gets the address of this Party.


        :return: The address of this Party.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this Party.


        :param address: The address of this Party.
        :type address: str
        """

        self._address = address

    @property
    def user_id(self) -> int:
        """Gets the user_id of this Party.


        :return: The user_id of this Party.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this Party.


        :param user_id: The user_id of this Party.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def active(self) -> bool:
        """Gets the active of this Party.


        :return: The active of this Party.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this Party.


        :param active: The active of this Party.
        :type active: bool
        """

        self._active = active
