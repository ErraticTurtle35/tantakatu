# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CurrencyRate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, price: float=None, _date: date=None, active: bool=True, currency_id: int=None):  # noqa: E501
        """CurrencyRate - a model defined in Swagger

        :param id: The id of this CurrencyRate.  # noqa: E501
        :type id: int
        :param price: The price of this CurrencyRate.  # noqa: E501
        :type price: float
        :param _date: The _date of this CurrencyRate.  # noqa: E501
        :type _date: date
        :param active: The active of this CurrencyRate.  # noqa: E501
        :type active: bool
        :param currency_id: The currency_id of this CurrencyRate.  # noqa: E501
        :type currency_id: int
        """
        self.swagger_types = {
            'id': int,
            'price': float,
            '_date': date,
            'active': bool,
            'currency_id': int
        }

        self.attribute_map = {
            'id': 'id',
            'price': 'price',
            '_date': 'date',
            'active': 'active',
            'currency_id': 'currency_id'
        }
        self._id = id
        self._price = price
        self.__date = _date
        self._active = active
        self._currency_id = currency_id

    @classmethod
    def from_dict(cls, dikt) -> 'CurrencyRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CurrencyRate of this CurrencyRate.  # noqa: E501
        :rtype: CurrencyRate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this CurrencyRate.


        :return: The id of this CurrencyRate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this CurrencyRate.


        :param id: The id of this CurrencyRate.
        :type id: int
        """

        self._id = id

    @property
    def price(self) -> float:
        """Gets the price of this CurrencyRate.


        :return: The price of this CurrencyRate.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this CurrencyRate.


        :param price: The price of this CurrencyRate.
        :type price: float
        """

        self._price = price

    @property
    def _date(self) -> date:
        """Gets the _date of this CurrencyRate.


        :return: The _date of this CurrencyRate.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date: date):
        """Sets the _date of this CurrencyRate.


        :param _date: The _date of this CurrencyRate.
        :type _date: date
        """

        self.__date = _date

    @property
    def active(self) -> bool:
        """Gets the active of this CurrencyRate.


        :return: The active of this CurrencyRate.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this CurrencyRate.


        :param active: The active of this CurrencyRate.
        :type active: bool
        """

        self._active = active

    @property
    def currency_id(self) -> int:
        """Gets the currency_id of this CurrencyRate.


        :return: The currency_id of this CurrencyRate.
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id: int):
        """Sets the currency_id of this CurrencyRate.


        :param currency_id: The currency_id of this CurrencyRate.
        :type currency_id: int
        """

        self._currency_id = currency_id
