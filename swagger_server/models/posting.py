# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Posting(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, title: str=None, description: str=None, sales_price: float=None, currency_id: int=None, posting_type: str='fixed_sales_price', state: str='draft', category_id: int=None, active: bool=True):  # noqa: E501
        """Posting - a model defined in Swagger

        :param id: The id of this Posting.  # noqa: E501
        :type id: int
        :param title: The title of this Posting.  # noqa: E501
        :type title: str
        :param description: The description of this Posting.  # noqa: E501
        :type description: str
        :param sales_price: The sales_price of this Posting.  # noqa: E501
        :type sales_price: float
        :param currency_id: The currency_id of this Posting.  # noqa: E501
        :type currency_id: int
        :param posting_type: The posting_type of this Posting.  # noqa: E501
        :type posting_type: str
        :param state: The state of this Posting.  # noqa: E501
        :type state: str
        :param category_id: The category_id of this Posting.  # noqa: E501
        :type category_id: int
        :param active: The active of this Posting.  # noqa: E501
        :type active: bool
        """
        self.swagger_types = {
            'id': int,
            'title': str,
            'description': str,
            'sales_price': float,
            'currency_id': int,
            'posting_type': str,
            'state': str,
            'category_id': int,
            'active': bool
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'description': 'description',
            'sales_price': 'sales_price',
            'currency_id': 'currency_id',
            'posting_type': 'posting_type',
            'state': 'state',
            'category_id': 'category_id',
            'active': 'active'
        }
        self._id = id
        self._title = title
        self._description = description
        self._sales_price = sales_price
        self._currency_id = currency_id
        self._posting_type = posting_type
        self._state = state
        self._category_id = category_id
        self._active = active

    @classmethod
    def from_dict(cls, dikt) -> 'Posting':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Posting of this Posting.  # noqa: E501
        :rtype: Posting
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Posting.


        :return: The id of this Posting.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Posting.


        :param id: The id of this Posting.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this Posting.


        :return: The title of this Posting.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Posting.


        :param title: The title of this Posting.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self) -> str:
        """Gets the description of this Posting.


        :return: The description of this Posting.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Posting.


        :param description: The description of this Posting.
        :type description: str
        """

        self._description = description

    @property
    def sales_price(self) -> float:
        """Gets the sales_price of this Posting.


        :return: The sales_price of this Posting.
        :rtype: float
        """
        return self._sales_price

    @sales_price.setter
    def sales_price(self, sales_price: float):
        """Sets the sales_price of this Posting.


        :param sales_price: The sales_price of this Posting.
        :type sales_price: float
        """
        if sales_price is None:
            raise ValueError("Invalid value for `sales_price`, must not be `None`")  # noqa: E501

        self._sales_price = sales_price

    @property
    def currency_id(self) -> int:
        """Gets the currency_id of this Posting.


        :return: The currency_id of this Posting.
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id: int):
        """Sets the currency_id of this Posting.


        :param currency_id: The currency_id of this Posting.
        :type currency_id: int
        """
        if currency_id is None:
            raise ValueError("Invalid value for `currency_id`, must not be `None`")  # noqa: E501

        self._currency_id = currency_id

    @property
    def posting_type(self) -> str:
        """Gets the posting_type of this Posting.


        :return: The posting_type of this Posting.
        :rtype: str
        """
        return self._posting_type

    @posting_type.setter
    def posting_type(self, posting_type: str):
        """Sets the posting_type of this Posting.


        :param posting_type: The posting_type of this Posting.
        :type posting_type: str
        """
        allowed_values = ["fixed_sales_price", "negotiable_sales_price", "on_request_sales_price"]  # noqa: E501
        if posting_type not in allowed_values:
            raise ValueError(
                "Invalid value for `posting_type` ({0}), must be one of {1}"
                .format(posting_type, allowed_values)
            )

        self._posting_type = posting_type

    @property
    def state(self) -> str:
        """Gets the state of this Posting.


        :return: The state of this Posting.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this Posting.


        :param state: The state of this Posting.
        :type state: str
        """
        allowed_values = ["draft", "published", "selled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def category_id(self) -> int:
        """Gets the category_id of this Posting.


        :return: The category_id of this Posting.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id: int):
        """Sets the category_id of this Posting.


        :param category_id: The category_id of this Posting.
        :type category_id: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")  # noqa: E501

        self._category_id = category_id

    @property
    def active(self) -> bool:
        """Gets the active of this Posting.


        :return: The active of this Posting.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this Posting.


        :param active: The active of this Posting.
        :type active: bool
        """

        self._active = active
