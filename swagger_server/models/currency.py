# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Currency(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, code: str=None, active: bool=True):  # noqa: E501
        """Currency - a model defined in Swagger

        :param id: The id of this Currency.  # noqa: E501
        :type id: int
        :param code: The code of this Currency.  # noqa: E501
        :type code: str
        :param active: The active of this Currency.  # noqa: E501
        :type active: bool
        """
        self.swagger_types = {
            'id': int,
            'code': str,
            'active': bool
        }

        self.attribute_map = {
            'id': 'id',
            'code': 'code',
            'active': 'active'
        }
        self._id = id
        self._code = code
        self._active = active

    @classmethod
    def from_dict(cls, dikt) -> 'Currency':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Currency of this Currency.  # noqa: E501
        :rtype: Currency
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Currency.


        :return: The id of this Currency.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Currency.


        :param id: The id of this Currency.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def code(self) -> str:
        """Gets the code of this Currency.


        :return: The code of this Currency.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this Currency.


        :param code: The code of this Currency.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def active(self) -> bool:
        """Gets the active of this Currency.


        :return: The active of this Currency.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this Currency.


        :param active: The active of this Currency.
        :type active: bool
        """

        self._active = active
